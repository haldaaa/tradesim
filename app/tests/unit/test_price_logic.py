#!/usr/bin/env python3
"""
Tests unitaires pour la logique √©conomique des prix
==================================================

Ce module teste que la logique √©conomique est correcte :
- Plus de stock = prix plus bas (√©conomie d'√©chelle)
- Moins de stock = prix plus haut (raret√©)

Auteur: Assistant IA
Date: 2025-08-25
"""

import pytest
import random
from config.config import (
    FACTEUR_PRIX_STOCK_REFERENCE,
    FACTEUR_PRIX_STOCK_VARIATION,
    FACTEUR_PRIX_RANDOM_MIN,
    FACTEUR_PRIX_RANDOM_MAX
)


def test_price_logic_stock_elevated():
    """Test que plus de stock = prix plus bas"""
    prix_base = 100.0
    
    # Stock √©lev√© (100 unit√©s)
    stock_eleve = 100
    facteur_stock_eleve = 1.0 - (stock_eleve - FACTEUR_PRIX_STOCK_REFERENCE) / FACTEUR_PRIX_STOCK_VARIATION
    prix_eleve = prix_base * facteur_stock_eleve
    
    # Stock faible (10 unit√©s)
    stock_faible = 10
    facteur_stock_faible = 1.0 - (stock_faible - FACTEUR_PRIX_STOCK_REFERENCE) / FACTEUR_PRIX_STOCK_VARIATION
    prix_faible = prix_base * facteur_stock_faible
    
    # V√©rifier que prix √©lev√© < prix faible
    assert prix_eleve < prix_faible, f"Prix stock √©lev√© ({prix_eleve}) devrait √™tre < prix stock faible ({prix_faible})"
    
    print(f"‚úÖ Test pass√© : Stock √©lev√© ({stock_eleve}) = {prix_eleve:.2f}‚Ç¨ < Stock faible ({stock_faible}) = {prix_faible:.2f}‚Ç¨")


def test_price_logic_stock_reference():
    """Test que stock de r√©f√©rence = prix de base"""
    prix_base = 100.0
    stock_reference = FACTEUR_PRIX_STOCK_REFERENCE
    
    facteur_stock = 1.0 - (stock_reference - FACTEUR_PRIX_STOCK_REFERENCE) / FACTEUR_PRIX_STOCK_VARIATION
    prix_final = prix_base * facteur_stock
    
    # V√©rifier que prix final = prix de base
    assert abs(prix_final - prix_base) < 0.01, f"Prix final ({prix_final}) devrait √™tre = prix de base ({prix_base})"
    
    print(f"‚úÖ Test pass√© : Stock r√©f√©rence ({stock_reference}) = {prix_final:.2f}‚Ç¨ = Prix de base ({prix_base}‚Ç¨)")


def test_price_logic_factor_limits():
    """Test que les facteurs respectent les limites"""
    # Test avec stock minimum (1)
    stock_min = 1
    facteur_min = 1.0 - (stock_min - FACTEUR_PRIX_STOCK_REFERENCE) / FACTEUR_PRIX_STOCK_VARIATION
    
    # Test avec stock maximum (200)
    stock_max = 200
    facteur_max = 1.0 - (stock_max - FACTEUR_PRIX_STOCK_REFERENCE) / FACTEUR_PRIX_STOCK_VARIATION
    
    # V√©rifier que facteur_max < facteur_min (plus de stock = facteur plus bas)
    assert facteur_max < facteur_min, f"Facteur stock max ({facteur_max}) devrait √™tre < facteur stock min ({facteur_min})"
    
    print(f"‚úÖ Test pass√© : Facteur stock max ({facteur_max:.3f}) < Facteur stock min ({facteur_min:.3f})")


def test_price_logic_with_random_factor():
    """Test avec facteur al√©atoire"""
    prix_base = 100.0
    stock_eleve = 100
    stock_faible = 10
    
    # Calculer facteurs stock
    facteur_stock_eleve = 1.0 - (stock_eleve - FACTEUR_PRIX_STOCK_REFERENCE) / FACTEUR_PRIX_STOCK_VARIATION
    facteur_stock_faible = 1.0 - (stock_faible - FACTEUR_PRIX_STOCK_REFERENCE) / FACTEUR_PRIX_STOCK_VARIATION
    
    # Ajouter facteur al√©atoire
    facteur_random = random.uniform(FACTEUR_PRIX_RANDOM_MIN, FACTEUR_PRIX_RANDOM_MAX)
    
    prix_eleve = prix_base * facteur_stock_eleve * facteur_random
    prix_faible = prix_base * facteur_stock_faible * facteur_random
    
    # V√©rifier que la logique reste correcte m√™me avec facteur al√©atoire
    assert prix_eleve < prix_faible, f"Avec facteur al√©atoire: Prix √©lev√© ({prix_eleve:.2f}) devrait √™tre < prix faible ({prix_faible:.2f})"
    
    print(f"‚úÖ Test pass√© avec facteur al√©atoire ({facteur_random:.3f}): Stock √©lev√© = {prix_eleve:.2f}‚Ç¨ < Stock faible = {prix_faible:.2f}‚Ç¨")


def test_price_logic_maximum_price():
    """Test que les prix ne d√©passent pas les limites raisonnables"""
    prix_base = 500.0  # Prix maximum configur√©
    stock_min = 1      # Stock minimum
    
    # Calculer le prix maximum possible
    facteur_stock = 1.0 - (stock_min - FACTEUR_PRIX_STOCK_REFERENCE) / FACTEUR_PRIX_STOCK_VARIATION
    facteur_random_max = FACTEUR_PRIX_RANDOM_MAX
    prix_max_possible = prix_base * facteur_stock * facteur_random_max
    
    # V√©rifier que le prix ne d√©passe pas 560‚Ç¨ (500‚Ç¨ + 12% de marge pour facteurs al√©atoires)
    assert prix_max_possible <= 560.0, f"Prix maximum possible ({prix_max_possible:.2f}‚Ç¨) d√©passe 560‚Ç¨"
    
    print(f"‚úÖ Test pass√© : Prix maximum possible ({prix_max_possible:.2f}‚Ç¨) <= 560‚Ç¨")


if __name__ == "__main__":
    """Lancement des tests"""
    print("üß™ TESTS DE LA LOGIQUE √âCONOMIQUE DES PRIX")
    print("=" * 50)
    
    test_price_logic_stock_elevated()
    test_price_logic_stock_reference()
    test_price_logic_factor_limits()
    test_price_logic_with_random_factor()
    test_price_logic_maximum_price()
    
    print("\nüéâ TOUS LES TESTS PASS√âS !")
    print("‚úÖ Logique √©conomique correcte : Plus de stock = Prix plus bas")
