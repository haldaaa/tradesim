#!/bin/bash
# Script de d√©marrage modulaire du monitoring TradeSim
# ====================================================
#
# ARCHITECTURE :
# - D√©tection automatique du host Docker
# - D√©marrage des services de monitoring
# - Configuration automatique de Prometheus
# - Validation de la connectivit√©
#
# FONCTIONNEMENT :
# 1. D√©tection automatique de la plateforme
# 2. Configuration du host Docker appropri√©
# 3. D√©marrage des containers Docker
# 4. Configuration de Prometheus
# 5. Validation des services
#
# UTILISATION :
# - Ex√©cution : ./start_monitoring.sh
# - Arr√™t : ./stop_monitoring.sh
# - Status : ./status_monitoring.sh
#
# AUTEUR : Assistant IA
# DERNI√àRE MISE √Ä JOUR : 16/08/2025

# ============================================================================
# FONCTIONS DE LOGGING
# ============================================================================

log_message() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [MONITORING] $message"
    
    # Log dans le fichier monitoring.log
    echo "[$timestamp] [MONITORING] $message" >> logs/monitoring.log 2>/dev/null || true
}

# ============================================================================
# D√âTECTION ET CONFIGURATION
# ============================================================================

setup_docker_host() {
    log_message "Configuration du host Docker"
    
    # Ex√©cuter le script de d√©tection
    source ./monitoring/detect_docker_host.sh
    
    if [ -z "$TRADESIM_DOCKER_HOST" ]; then
        log_message "ERREUR : Impossible de d√©tecter le host Docker"
        return 1
    fi
    
    log_message "Host Docker configur√© : $TRADESIM_DOCKER_HOST"
    return 0
}

# ============================================================================
# CONFIGURATION DE PROMETHEUS
# ============================================================================

configure_prometheus() {
    local docker_host="$1"
    local config_file="monitoring/prometheus.yml"
    
    log_message "Configuration de Prometheus avec host : $docker_host"
    
    # Sauvegarder la configuration originale
    cp "$config_file" "${config_file}.backup" 2>/dev/null || true
    
    # Mettre √† jour la configuration
    sed -i.bak "s/targets: \['.*:8000'\]/targets: ['${docker_host}:8000']/" "$config_file"
    
    if [ $? -eq 0 ]; then
        log_message "Configuration Prometheus mise √† jour : target=${docker_host}:8000"
        return 0
    else
        log_message "ERREUR : Impossible de mettre √† jour la configuration Prometheus"
        return 1
    fi
}

# ============================================================================
# D√âMARRAGE DES SERVICES
# ============================================================================

start_docker_services() {
    log_message "D√©marrage des services Docker"
    
    # Arr√™ter les services existants
    docker-compose -f monitoring/docker-compose.yml down 2>/dev/null || true
    
    # D√©marrer les services
    if docker-compose -f monitoring/docker-compose.yml up -d; then
        log_message "Services Docker d√©marr√©s avec succ√®s"
        return 0
    else
        log_message "ERREUR : Impossible de d√©marrer les services Docker"
        return 1
    fi
}

# ============================================================================
# VALIDATION DES SERVICES
# ============================================================================

validate_services() {
    log_message "Validation des services"
    
    # Attendre que les services d√©marrent
    sleep 10
    
    # V√©rifier Prometheus
    if curl -s http://localhost:9090/api/v1/status/targets >/dev/null 2>&1; then
        log_message "Prometheus accessible sur http://localhost:9090"
    else
        log_message "ATTENTION : Prometheus non accessible"
    fi
    
    # V√©rifier Grafana
    if curl -s http://localhost:3000/api/health >/dev/null 2>&1; then
        log_message "Grafana accessible sur http://localhost:3000"
    else
        log_message "ATTENTION : Grafana non accessible"
    fi
    
    # V√©rifier l'exporteur
    if curl -s http://localhost:8000/health >/dev/null 2>&1; then
        log_message "Exporteur Prometheus accessible sur http://localhost:8000"
    else
        log_message "ATTENTION : Exporteur Prometheus non accessible"
    fi
}

# ============================================================================
# FONCTION PRINCIPALE
# ============================================================================

main() {
    log_message "D√©marrage du monitoring TradeSim"
    
    # Cr√©er le dossier logs s'il n'existe pas
    mkdir -p logs 2>/dev/null || true
    
    # Configuration du host Docker
    if ! setup_docker_host; then
        log_message "ERREUR : √âchec de la configuration du host Docker"
        exit 1
    fi
    
    # Configuration de Prometheus
    if ! configure_prometheus "$TRADESIM_DOCKER_HOST"; then
        log_message "ERREUR : √âchec de la configuration de Prometheus"
        exit 1
    fi
    
    # D√©marrage des services
    if ! start_docker_services; then
        log_message "ERREUR : √âchec du d√©marrage des services"
        exit 1
    fi
    
    # Validation des services
    validate_services
    
    log_message "Monitoring d√©marr√© avec succ√®s"
    echo ""
    echo "üìä Monitoring TradeSim d√©marr√© !"
    echo "   Prometheus : http://localhost:9090"
    echo "   Grafana    : http://localhost:3000 (admin/admin)"
    echo "   Exporteur  : http://localhost:8000"
    echo ""
    
    return 0
}

# ============================================================================
# EX√âCUTION
# ============================================================================

main "$@"
