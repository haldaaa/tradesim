"""
Service centralis√© pour la gestion des prix des produits.

Ce service centralise toute la logique de gestion des prix pour √©viter la duplication
et rendre l'application plus modulaire et maintenable.

MODE CLI : Utilise les donn√©es en m√©moire
MODE WEB : Utilisera les donn√©es de la base de donn√©es
"""

from typing import Optional, Dict, Tuple
from models.models import Produit, Fournisseur
from repositories import ProduitRepository, FournisseurRepository


class PriceService:
    """
    Service centralis√© pour la gestion des prix des produits.
    
    Responsabilit√©s :
    - R√©cup√©rer les prix des produits chez les fournisseurs
    - D√©finir les prix des produits chez les fournisseurs
    - Calculer les prix minimum/maximum
    - G√©rer la logique de prix pour les achats
    """
    
    def __init__(self):
        """Initialise le service avec les repositories n√©cessaires."""
        self.produit_repo = ProduitRepository()
        self.fournisseur_repo = FournisseurRepository()
        
        # Stockage des prix (remplace prix_par_fournisseur de data.py)
        self._prix_stockage: Dict[Tuple[int, int], float] = {}
        
        # Cache des prix pour optimiser les performances
        self._prix_cache: Dict[Tuple[int, int], float] = {}
    
    def get_prix_produit_fournisseur(self, produit_id: int, fournisseur_id: int) -> Optional[float]:
        """
        R√©cup√®re le prix d'un produit chez un fournisseur sp√©cifique.
        
        Args:
            produit_id: ID du produit
            fournisseur_id: ID du fournisseur
            
        Returns:
            Le prix du produit chez ce fournisseur, ou None si non d√©fini
        """
        # V√©rifier le cache d'abord
        cache_key = (produit_id, fournisseur_id)
        if cache_key in self._prix_cache:
            return self._prix_cache[cache_key]
        
        # R√©cup√©rer le fournisseur
        fournisseur = self.fournisseur_repo.get_by_id(fournisseur_id)
        if not fournisseur:
            return None
        
        # R√©cup√©rer le produit
        produit = self.produit_repo.get_by_id(produit_id)
        if not produit:
            return None
        
        # V√©rifier si le fournisseur a ce produit en stock
        if produit_id not in fournisseur.stock_produit:
            return None
        
        # R√©cup√©rer le prix depuis le stockage interne
        prix = self._prix_stockage.get((produit_id, fournisseur_id))
        
        # Mettre en cache
        self._prix_cache[cache_key] = prix
        
        return prix
    
    def set_prix_produit_fournisseur(self, produit_id: int, fournisseur_id: int, prix: float) -> bool:
        """
        D√©finit le prix d'un produit chez un fournisseur sp√©cifique.
        
        Args:
            produit_id: ID du produit
            fournisseur_id: ID du fournisseur
            prix: Nouveau prix √† d√©finir
            
        Returns:
            True si le prix a √©t√© d√©fini avec succ√®s, False sinon
        """
        # R√©cup√©rer le fournisseur
        fournisseur = self.fournisseur_repo.get_by_id(fournisseur_id)
        if not fournisseur:
            return False
        
        # R√©cup√©rer le produit
        produit = self.produit_repo.get_by_id(produit_id)
        if not produit:
            return False
        
        # V√©rifier que le fournisseur a ce produit en stock
        if produit_id not in fournisseur.stock_produit:
            return False
        
        # D√©finir le prix dans le stockage interne
        self._prix_stockage[(produit_id, fournisseur_id)] = prix
        
        # Mettre √† jour le cache
        cache_key = (produit_id, fournisseur_id)
        self._prix_cache[cache_key] = prix
        
        return True
    
    def set_prix_produit_fournisseur_force(self, produit_id: int, fournisseur_id: int, prix: float) -> bool:
        """
        D√©finit le prix d'un produit chez un fournisseur sp√©cifique sans v√©rification.
        Utilis√© lors de la g√©n√©ration des donn√©es.
        
        Args:
            produit_id: ID du produit
            fournisseur_id: ID du fournisseur
            prix: Nouveau prix √† d√©finir
            
        Returns:
            True si le prix a √©t√© d√©fini avec succ√®s
        """
        # D√©finir le prix dans le stockage interne
        self._prix_stockage[(produit_id, fournisseur_id)] = prix
        
        # Mettre √† jour le cache
        cache_key = (produit_id, fournisseur_id)
        self._prix_cache[cache_key] = prix
        
        return True
    
    def get_prix_minimum(self, produit_id: int) -> Optional[float]:
        """
        R√©cup√®re le prix minimum d'un produit chez tous les fournisseurs.
        
        Args:
            produit_id: ID du produit
            
        Returns:
            Le prix minimum, ou None si aucun fournisseur n'a ce produit
        """
        fournisseurs = self.fournisseur_repo.get_all()
        prix_min = None
        
        for fournisseur in fournisseurs:
            prix = self.get_prix_produit_fournisseur(produit_id, fournisseur.id)
            if prix is not None:
                if prix_min is None or prix < prix_min:
                    prix_min = prix
        
        return prix_min
    
    def get_prix_maximum(self, produit_id: int) -> Optional[float]:
        """
        R√©cup√®re le prix maximum d'un produit chez tous les fournisseurs.
        
        Args:
            produit_id: ID du produit
            
        Returns:
            Le prix maximum, ou None si aucun fournisseur n'a ce produit
        """
        fournisseurs = self.fournisseur_repo.get_all()
        prix_max = None
        
        for fournisseur in fournisseurs:
            prix = self.get_prix_produit_fournisseur(produit_id, fournisseur.id)
            if prix is not None:
                if prix_max is None or prix > prix_max:
                    prix_max = prix
        
        return prix_max
    
    def get_fournisseurs_avec_produit(self, produit_id: int) -> list[Fournisseur]:
        """
        R√©cup√®re tous les fournisseurs qui ont un produit sp√©cifique en stock.
        
        Args:
            produit_id: ID du produit
            
        Returns:
            Liste des fournisseurs ayant ce produit en stock
        """
        fournisseurs = self.fournisseur_repo.get_all()
        return [
            f for f in fournisseurs
            if produit_id in f.stock_produit and f.stock_produit[produit_id] > 0
        ]
    
    def clear_cache(self) -> None:
        """Vide le cache des prix."""
        self._prix_cache.clear()
    
    def reset(self) -> None:
        """Remet √† z√©ro le service de prix (vide le stockage et le cache)."""
        print(f"üîç DEBUG: PriceService.reset() appel√© - Stockage contient {len(self._prix_stockage)} prix")
        self._prix_stockage.clear()
        self._prix_cache.clear()
        print(f"üîç DEBUG: PriceService.reset() termin√© - Stockage contient {len(self._prix_stockage)} prix")


# Instance globale du service de prix
price_service = PriceService() 