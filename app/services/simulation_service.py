#!/usr/bin/env python3
"""
SimulationService TradeSim - Orchestration de la simulation
==========================================================

Ce service orchestre la simulation √©conomique TradeSim.
Il g√®re les tours de simulation, les √©v√©nements et l'√©tat global.

Refactorisation (02/08/2025) :
- Utilise les Repository pour l'acc√®s aux donn√©es
- Code modulaire et testable
- Interface commune pour CLI et API

Auteur: Assistant IA
Date: 2024-08-02
"""

import random
import time
from typing import Dict, List, Any, Optional
from datetime import datetime

from repositories import ProduitRepository, FournisseurRepository, EntrepriseRepository
from models import Produit, Fournisseur, Entreprise, TypeProduit
from events.inflation import appliquer_inflation
from events.reassort import evenement_reassort
from events.recharge_budget import appliquer_recharge_budget
from events.variation_disponibilite import appliquer_variation_disponibilite
from config import (
    PROBABILITE_SELECTION_ENTREPRISE, DUREE_PAUSE_ENTRE_TOURS,
    TICK_INTERVAL_EVENT, PROBABILITE_EVENEMENT
)


class SimulationService:
    """
    Service d'orchestration de la simulation TradeSim.
    
    Responsabilit√©s :
    - G√©rer les tours de simulation
    - Orchestrer les √©v√©nements
    - Maintenir l'√©tat global
    - Fournir des statistiques
    """
    
    def __init__(self):
        """Initialise le service de simulation"""
        self.produit_repo = ProduitRepository()
        self.fournisseur_repo = FournisseurRepository()
        self.entreprise_repo = EntrepriseRepository()
        
        # √âtat de la simulation
        self.tick_actuel = 0
        self.tours_completes = 0
        self.evenements_appliques = []
        self.statistiques = {
            "tours_completes": 0,
            "evenements_appliques": 0,
            "transactions_effectuees": 0,
            "budget_total_initial": 0,
            "budget_total_actuel": 0
        }
    
    def reset_simulation(self):
        """Remet la simulation √† z√©ro"""
        self.tick_actuel = 0
        self.tours_completes = 0
        self.evenements_appliques = []
        self.statistiques = {
            "tours_completes": 0,
            "evenements_appliques": 0,
            "transactions_effectuees": 0,
            "budget_total_initial": 0,
            "budget_total_actuel": 0
        }
        print("‚úÖ Simulation remise √† z√©ro")
    
    def calculer_statistiques(self):
        """Calcule les statistiques actuelles de la simulation"""
        entreprises = self.entreprise_repo.get_all()
        produits = self.produit_repo.get_all()
        fournisseurs = self.fournisseur_repo.get_all()
        
        self.statistiques.update({
            "tours_completes": self.tours_completes,
            "evenements_appliques": len(self.evenements_appliques),
            "budget_total_initial": sum(e.budget_initial for e in entreprises),
            "budget_total_actuel": sum(e.budget for e in entreprises),
            "nombre_entreprises": len(entreprises),
            "nombre_produits_actifs": len([p for p in produits if p.actif]),
            "nombre_fournisseurs": len(fournisseurs)
        })
        
        return self.statistiques
    
    def appliquer_evenements(self, tick: int) -> List[Dict[str, Any]]:
        """
        Applique les √©v√©nements al√©atoires selon la configuration.
        
        Args:
            tick: Le tick actuel de la simulation
            
        Returns:
            Liste des √©v√©nements appliqu√©s
        """
        evenements_appliques = []
        
        # V√©rifier si un √©v√©nement doit √™tre appliqu√©
        if tick % TICK_INTERVAL_EVENT == 0 and random.random() < 0.5:  # 50% de chance d'√©v√©nement
            # Choisir un √©v√©nement al√©atoire
            evenements_disponibles = [
                ("inflation", appliquer_inflation),
                ("reassort", evenement_reassort),
                ("recharge_budget", appliquer_recharge_budget),
                ("variation_disponibilite", appliquer_variation_disponibilite)
            ]
            
            nom_evenement, fonction_evenement = random.choice(evenements_disponibles)
            
            try:
                resultat = fonction_evenement(tick)
                if resultat:
                    evenements_appliques.extend(resultat)
                    self.evenements_appliques.extend(resultat)
                    print(f"üé≤ √âv√©nement '{nom_evenement}' appliqu√© au tick {tick}")
            except Exception as e:
                print(f"‚ùå Erreur lors de l'application de l'√©v√©nement '{nom_evenement}': {e}")
        
        return evenements_appliques
    
    def simulation_tour(self, verbose: bool = False) -> Dict[str, Any]:
        """
        Ex√©cute un tour de simulation complet.
        
        Args:
            verbose: Afficher les d√©tails du tour
            
        Returns:
            R√©sum√© du tour effectu√©
        """
        if verbose:
            print(f"\nüîÑ TOUR {self.tours_completes + 1} - Tick {self.tick_actuel}")
            print("=" * 50)
        
        # Appliquer les √©v√©nements
        evenements = self.appliquer_evenements(self.tick_actuel)
        
        # S√©lectionner les entreprises pour ce tour
        entreprises = self.entreprise_repo.get_all()
        entreprises_selectionnees = []
        
        for entreprise in entreprises:
            if random.random() < PROBABILITE_SELECTION_ENTREPRISE:
                entreprises_selectionnees.append(entreprise)
        
        # Effectuer les achats des entreprises s√©lectionn√©es
        transactions_effectuees = 0
        from datetime import datetime
        
        for entreprise in entreprises_selectionnees:
            if verbose:
                print(f"üí∞ {entreprise.nom} (Budget: {entreprise.budget:.2f}‚Ç¨)")
            
            # R√©cup√©rer les produits disponibles pour cette entreprise
            produits_disponibles = self.get_produits_disponibles_pour_entreprise(entreprise)
            
            if produits_disponibles:
                # Choisir un produit al√©atoire
                produit_choisi = random.choice(produits_disponibles)
                
                # Horodatages pour les logs
                horodatage_iso = datetime.utcnow().isoformat()
                horodatage_humain = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
                
                # Utiliser la vraie logique d'achat de simulateur.py
                from services.simulateur import acheter_produit
                succes_achat = acheter_produit(
                    entreprise=entreprise,
                    produit=produit_choisi,
                    horodatage_iso=horodatage_iso,
                    horodatage_humain=horodatage_humain,
                    strategie=entreprise.strategie,
                    verbose=verbose
                )
                
                if succes_achat:
                    transactions_effectuees += 1
                    if verbose:
                        print(f"  ‚úÖ Achat r√©ussi: {produit_choisi.nom}")
                else:
                    if verbose:
                        print(f"  ‚ùå Achat √©chou√©: {produit_choisi.nom}")
            else:
                if verbose:
                    print(f"  ‚ö†Ô∏è Aucun produit disponible pour {entreprise.nom}")
        
        # Mettre √† jour les statistiques
        self.tours_completes += 1
        self.tick_actuel += 1
        self.statistiques["transactions_effectuees"] += transactions_effectuees
        
        # Calculer les nouvelles statistiques
        stats = self.calculer_statistiques()
        
        resultat_tour = {
            "tour": self.tours_completes,
            "tick": self.tick_actuel,
            "entreprises_selectionnees": len(entreprises_selectionnees),
            "transactions_effectuees": transactions_effectuees,
            "evenements_appliques": len(evenements),
            "statistiques": stats
        }
        
        if verbose:
            print(f"üìä R√©sum√© du tour: {transactions_effectuees} transactions, {len(evenements)} √©v√©nements")
            print("=" * 50)
        
        return resultat_tour
    
    def run_simulation_tours(self, n_tours: int, verbose: bool = False) -> List[Dict[str, Any]]:
        """
        Ex√©cute une simulation sur un nombre d√©fini de tours.
        
        Args:
            n_tours: Nombre de tours √† ex√©cuter
            verbose: Afficher les d√©tails
            
        Returns:
            Liste des r√©sultats de chaque tour
        """
        print(f"üöÄ Lancement de la simulation sur {n_tours} tours...")
        
        resultats = []
        
        for tour in range(n_tours):
            resultat = self.simulation_tour(verbose)
            resultats.append(resultat)
            
            # Pause entre les tours
            if tour < n_tours - 1:  # Pas de pause apr√®s le dernier tour
                time.sleep(DUREE_PAUSE_ENTRE_TOURS)
        
        print(f"‚úÖ Simulation termin√©e apr√®s {n_tours} tours")
        return resultats
    
    def run_simulation_infinite(self, verbose: bool = False):
        """
        Ex√©cute une simulation en boucle infinie.
        
        Args:
            verbose: Afficher les d√©tails
        """
        print("‚ôæÔ∏è Lancement de la simulation en mode infini...")
        print("Appuyez sur Ctrl+C pour arr√™ter")
        
        try:
            while True:
                self.simulation_tour(verbose)
                time.sleep(DUREE_PAUSE_ENTRE_TOURS)
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Simulation arr√™t√©e par l'utilisateur")
            print(f"üìä Statistiques finales: {self.statistiques}")
    
    def get_etat_actuel(self) -> Dict[str, Any]:
        """
        R√©cup√®re l'√©tat actuel de la simulation.
        
        Returns:
            √âtat complet de la simulation
        """
        stats = self.calculer_statistiques()
        
        return {
            "tick_actuel": self.tick_actuel,
            "tours_completes": self.tours_completes,
            "statistiques": stats,
            "derniers_evenements": self.evenements_appliques[-10:] if self.evenements_appliques else []
        }
    
    def get_produits_disponibles_pour_entreprise(self, entreprise: Entreprise) -> List[Produit]:
        """
        R√©cup√®re les produits disponibles pour une entreprise.
        
        Args:
            entreprise: L'entreprise qui veut acheter
            
        Returns:
            Liste des produits disponibles
        """
        from repositories import ProduitRepository, FournisseurRepository
        
        produit_repo = ProduitRepository()
        fournisseur_repo = FournisseurRepository()
        
        # R√©cup√©rer tous les produits actifs
        produits_actifs = produit_repo.get_actifs()
        
        # Filtrer les produits disponibles (avec stock chez les fournisseurs)
        produits_disponibles = []
        
        for produit in produits_actifs:
            # V√©rifier si au moins un fournisseur a ce produit en stock
            fournisseurs_avec_stock = [
                f for f in fournisseur_repo.get_all()
                if produit.id in f.stock_produit and f.stock_produit[produit.id] > 0
            ]
            
            if fournisseurs_avec_stock:
                # V√©rifier si l'entreprise peut se le permettre (prix minimum)
                from services.simulateur import get_prix_minimum
                prix_min = get_prix_minimum(produit.id)
                
                if prix_min is not None and entreprise.budget >= prix_min:
                    produits_disponibles.append(produit)
        
        return produits_disponibles
    
    def afficher_etat(self):
        """Affiche l'√©tat actuel de la simulation"""
        etat = self.get_etat_actuel()
        
        print("\n" + "=" * 60)
        print("üìä √âTAT DE LA SIMULATION")
        print("=" * 60)
        
        print(f"üîÑ Tours compl√©t√©s: {etat['tours_completes']}")
        print(f"‚è∞ Tick actuel: {etat['tick_actuel']}")
        print(f"üé≤ √âv√©nements appliqu√©s: {etat['statistiques']['evenements_appliques']}")
        print(f"üí∞ Budget total: {etat['statistiques']['budget_total_actuel']:.2f}‚Ç¨")
        print(f"üè¢ Entreprises: {etat['statistiques']['nombre_entreprises']}")
        print(f"üì¶ Produits actifs: {etat['statistiques']['nombre_produits_actifs']}")
        print(f"üè™ Fournisseurs: {etat['statistiques']['nombre_fournisseurs']}")
        
        print("\n" + "=" * 60)


# Instance globale du service
simulation_service = SimulationService() 