#!/usr/bin/env python3
"""
Configuration des modes d'ex√©cution - TradeSim
==============================================

Ce fichier centralise la configuration des modes d'ex√©cution de TradeSim.
Il permet de basculer facilement entre le mode CLI (donn√©es en m√©moire)
et le mode Web (base de donn√©es) sans modifier le reste du code.

Auteur: Assistant IA
Date: 2024-08-02
"""

from enum import Enum
from typing import Literal

class ExecutionMode(Enum):
    """
    Modes d'ex√©cution disponibles pour TradeSim.
    
    CLI: Utilise les donn√©es en m√©moire (FakeRepository)
    WEB: Utilise une base de donn√©es (SQLRepository)
    """
    CLI = "cli"
    WEB = "web"

# Configuration actuelle du mode d'ex√©cution
# Pour changer de mode, modifiez cette variable :
CURRENT_MODE: ExecutionMode = ExecutionMode.CLI

# Alias pour faciliter l'utilisation
MODE_CLI = ExecutionMode.CLI
MODE_WEB = ExecutionMode.WEB

def get_current_mode() -> ExecutionMode:
    """
    R√©cup√®re le mode d'ex√©cution actuel.
    
    Returns:
        ExecutionMode: Le mode d'ex√©cution actuel (CLI ou WEB)
    """
    return CURRENT_MODE

def is_cli_mode() -> bool:
    """
    V√©rifie si l'application est en mode CLI.
    
    Returns:
        bool: True si en mode CLI, False sinon
    """
    return CURRENT_MODE == ExecutionMode.CLI

def is_web_mode() -> bool:
    """
    V√©rifie si l'application est en mode Web.
    
    Returns:
        bool: True si en mode Web, False sinon
    """
    return CURRENT_MODE == ExecutionMode.WEB

def set_mode(mode: ExecutionMode) -> None:
    """
    Change le mode d'ex√©cution de l'application.
    
    Args:
        mode (ExecutionMode): Le nouveau mode d'ex√©cution
        
    Example:
        # Passer en mode Web
        set_mode(ExecutionMode.WEB)
        
        # Passer en mode CLI
        set_mode(ExecutionMode.CLI)
    """
    global CURRENT_MODE
    CURRENT_MODE = mode
    print(f"üîÑ Mode d'ex√©cution chang√© vers: {mode.value.upper()}")

def get_mode_description() -> str:
    """
    R√©cup√®re une description du mode actuel.
    
    Returns:
        str: Description du mode actuel
    """
    if is_cli_mode():
        return "Mode CLI - Donn√©es en m√©moire (pour d√©veloppement et tests)"
    else:
        return "Mode Web - Base de donn√©es (pour production)"

# Configuration des Repository selon le mode
def get_repository_config() -> dict:
    """
    R√©cup√®re la configuration des Repository selon le mode actuel.
    
    Returns:
        dict: Configuration des Repository
    """
    if is_cli_mode():
        return {
            "produit_repository": "FakeProduitRepository",
            "fournisseur_repository": "FakeFournisseurRepository", 
            "entreprise_repository": "FakeEntrepriseRepository",
            "description": "Donn√©es en m√©moire pour d√©veloppement"
        }
    else:
        return {
            "produit_repository": "SQLProduitRepository",
            "fournisseur_repository": "SQLFournisseurRepository",
            "entreprise_repository": "SQLEntrepriseRepository", 
            "description": "Base de donn√©es pour production"
        }

# Instructions pour changer de mode
MODE_CHANGE_INSTRUCTIONS = """
üìã Instructions pour changer de mode :

1. MODE CLI (d√©veloppement) :
   - Ouvrir config/mode.py
   - Changer CURRENT_MODE = ExecutionMode.CLI
   - Les Repository utilisent les donn√©es en m√©moire

2. MODE WEB (production) :
   - Ouvrir config/mode.py  
   - Changer CURRENT_MODE = ExecutionMode.WEB
   - Les Repository utilisent la base de donn√©es
   - N√©cessite une base de donn√©es configur√©e

3. V√©rification :
   - Lancer les tests pour v√©rifier le bon fonctionnement
   - Tester l'API si en mode Web
""" 